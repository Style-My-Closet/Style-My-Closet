plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.stylemycloset'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// test 컴파일 단계에서도 특정 패키지를 제외
sourceSets {
    test {
        java {
            exclude 'com/stylemycloset/user/**'
            exclude 'com/stylemycloset/notification/**'
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    JJWT_VERSION = "0.12.3"
    SPRING_CLOUD_VERSION = "2023.0.3"
    RESILIENCE4J_VERSION = "2.3.0"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${SPRING_CLOUD_VERSION}"
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    // @Lombok과 @MapStruct간의 충돌 방지

    // QueryDSL dependencies
    implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
    annotationProcessor 'com.querydsl:querydsl-apt:5.1.0:jakarta'
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    //로컬 캐시
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // Circuit Breaker
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'

    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'org.postgresql:postgresql'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql:1.21.3'

    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation "org.springframework.security:spring-security-test"

    implementation "io.jsonwebtoken:jjwt-api:${JJWT_VERSION}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${JJWT_VERSION}"
    runtimeOnly "io.jsonwebtoken:jjwt-gson:${JJWT_VERSION}"

    implementation 'org.springframework.retry:spring-retry'

    testImplementation 'org.awaitility:awaitility:4.2.0'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    implementation 'com.vladmihalcea:hibernate-types-60:2.21.1'

    implementation 'com.google.guava:guava:32.1.3-jre'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'



    implementation 'net.sourceforge.tess4j:tess4j:5.11.0'

    implementation 'software.amazon.awssdk:s3:2.31.7'
    testImplementation 'org.testcontainers:localstack'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'com.h2database:h2'



    testImplementation 'org.mockito:mockito-core:5.11.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.11.0'

    implementation 'org.springframework.boot:spring-boot-starter-aop'
}

test {
    useJUnitPlatform {
        def include = System.getProperty('includeTags')
        def exclude = System.getProperty('excludeTags')
        if (include) {
            includeTags include.split(',')
        }
        if (exclude) {
            excludeTags exclude.split(',')
        } else {
            // 기본적으로 e2e 태그 제외
            excludeTags 'e2e'
        }
    }
    // 기본 제외 설정: cloth 외 영역 테스트는 실행하지 않음
    exclude '**/com/stylemycloset/user/**'
    exclude '**/com/stylemycloset/notification/**'
    finalizedBy jacocoTestReport
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
}


